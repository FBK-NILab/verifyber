[DEFAULT]
########### model ###########
model = sdec # model name; choices (sdec | dec | pn_geom | finta | blstm)
# to add a new model add it to models and utils/model_utils.py
batch_norm = y # whether to use batch norm 
k = 5 # k of the k-nn used in dec and sdec; ignore if sdec/dec is not used

########## training ###########
n_epochs = 1000

optimizer = adam # choiches (adam | sgd_momentum)
momentum = 0.9 # momentum of sgd_momentum; ignore if using adam
accumulation_interval = n # set to an int number if you want to accumulate gradient for that number of iterations 
lr_type = step # choiches (step | plateau) 
learning_rate = 1e-3
min_lr = 5e-5 # minumum lr value
lr_ep_step = 90
lr_gamma = 0.7 # lr decay rate for step lr
patience = 100 # stopping condition for plateau lr

weight_decay = 5e-4 # weight decay

bn_decay = n # batchnorm decay
bn_decay_init = 0.5
bn_decay_step = 90
bn_decay_gamma = 0.5 

########## loss ###########
loss = nll # choices: for classification nll; for regression (mse | mse_sum | mae)
nll_w = n # class re-weighting
nll_w_decay = n # class re-weighting decay
nll_w_decay_step = 90

########### general ###########
val_in_train = y # whether to validate during training
val_freq = 100 # validation frequency

n_workers = 6 # num workers for the dataloader
seed = 10

########### logging ###########
model_dir = checkpoints # dir name where to save trained models 
save_model = y # whether to save the model checkpoints at each validation epoch
save_pred = n # whether to save the predictions
